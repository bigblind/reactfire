/*!
 * ReactFire is an open-source JavaScript library that allows you to add a
 * realtime data source to your React apps by providing an easy way to let
 * Firebase populate the state of React components.
 *
 * ReactFire 0.0.0
 * https://github.com/firebase/reactfire/
 * License: MIT
 */
!function(e,t){"use strict";if("function"==typeof define&&define.amd)define(["/react"],function(i){return e.ReactFireMixin=t(i)});else if("object"==typeof exports){var i=require("react");module.exports=t(i)}else e.ReactFireMixin=t(e.React)}(this,function(e){"use strict";function t(e){var t;return t="function"==typeof e.key?e.key():"string"==typeof e.key||null===e.key?e.key:e.name()}function i(e){var t;return t="function"==typeof e.ref?e.ref():e.ref}function n(e,t){for(var i=0,n=e.length;n>i;++i)if(e[i][".key"]===t)return i;return-1}function r(e){throw new Error("ReactFire: "+e)}function s(e){var t;"string"!=typeof e?t="Bind variable must be a string. Got: "+e:0===e.length?t='Bind variable must be a non-empty string. Got: ""':e.length>768?t="Bind variable is too long to be stored in Firebase. Got: "+e:/[\[\].#$\/\u0000-\u001F\u007F]/.test(e)&&(t="Bind variable cannot contain any of the following characters: . # $ ] [ /. Got: "+e),"undefined"!=typeof t&&r(t)}function a(e,t){var i={};return"object"==typeof t&&null!==t?i=t:i[".value"]=t,i[".key"]=e,i}function o(e,i){var n=t(i),r=i.val();this.data[e]=a(n,r),this.setState(this.data)}function f(e,i,r){var s,o=t(i),f=i.val(),d=this.data[e];if(null===r)s=0;else{var h=n(d,r);s=h+1}d.splice(s,0,a(o,f)),this.setState(this.data)}function d(e,i){var r=this.data[e],s=n(r,t(i));r.splice(s,1),this.setState(this.data)}function h(e,i){var r=t(i),s=i.val(),o=this.data[e],f=n(o,r);o[f]=a(r,s),this.setState(this.data)}function c(e,i,r){var s,a=t(i),o=this.data[e],f=n(o,a),d=o.splice(f,1)[0];if(null===r)s=0;else{var h=n(o,r);s=h+1}o.splice(s,0,d),this.setState(this.data)}function u(e,t,n,a){"[object Object]"!==Object.prototype.toString.call(e)&&r("Invalid Firebase reference"),s(t),"undefined"!=typeof this.firebaseRefs[t]&&r("this.state."+t+" is already bound to a Firebase reference"),this.firebaseRefs[t]=i(e),a?(this.data[t]=[],this.setState(this.data),this.firebaseListeners[t]={child_added:e.on("child_added",f.bind(this,t),n),child_removed:e.on("child_removed",d.bind(this,t),n),child_changed:e.on("child_changed",h.bind(this,t),n),child_moved:e.on("child_moved",c.bind(this,t),n)}):this.firebaseListeners[t]={value:e.on("value",o.bind(this,t),n)}}var l={componentWillMount:function(){this.data={},this.firebaseRefs={},this.firebaseListeners={}},componentWillUnmount:function(){for(var e in this.firebaseRefs)this.firebaseRefs.hasOwnProperty(e)&&this.unbind(e)},bindAsArray:function(e,t,i){var n=u.bind(this);n(e,t,i,!0)},bindAsObject:function(e,t,i){var n=u.bind(this);n(e,t,i,!1)},unbind:function(e,t){s(e),"undefined"==typeof this.firebaseRefs[e]&&r("this.state."+e+" is not bound to a Firebase reference");for(var i in this.firebaseListeners[e])if(this.firebaseListeners[e].hasOwnProperty(i)){var n=this.firebaseListeners[e][i];this.firebaseRefs[e].off(i,n)}delete this.firebaseRefs[e],delete this.firebaseListeners[e];var a={};a[e]=void 0,this.setState(a,t)}};return l.createContainer=function(t,i){return e.createClass({mixins:[l],getInitialState:function(){return{}},makeBindVar:function(e){return e+"__bindvar"},getStateFromRefs:function(e,t){var n={refs:i};"function"==typeof i&&(n.refs=i(e)),t.refs||(t.refs={});var r,s;for(r in n.refs)n.refs.hasOwnProperty(r)&&(s=this.makeBindVar(r),t.refs.hasOwnProperty(r)?this.updateBinding(s,t.refs[r],n.refs[r]):this.addBinding(s,n.refs[r]));for(r in t.refs)t.refs.hasOwnProperty(r)&&!n.refs.hasOwnProperty(r)&&this.removeBinding(this.makeBindVar(r));return n},addBinding:function(e,t){"array"===t.type?this.bindAsArray(t.ref,e):"object"===t.type?this.bindAsObject(t.ref,e):r("Unknown type to bind as: "+t.type+".l")},updateBinding:function(e,t,i){t.ref.toString()===i.ref.toString()&&t.type===i.type||(this.removeBinding(e),this.addBinding(e,i))},removeBinding:function(e){this.unbind(e)},componentWillMount:function(){this.setState(function(e){return this.getStateFromRefs(this.props,e)})},componentWillReceiveProps:function(e){this.setState(function(t){return this.getStateFromRefs(e,t)})},getDataProps:function(){var e={};for(var t in this.state.refs)this.state.refs.hasOwnProperty(t)&&(e[t]=this.state[this.makeBindVar(t)]);return e},render:function(){var i=e.createFactory(t),n=Object.assign({},this.props,this.getDataProps());return i(n)}})},l});